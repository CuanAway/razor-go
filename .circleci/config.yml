# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
jobs:
  test:
    docker:
      - image: cimg/go:1.17.6
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - run:
          name: "Building docker image"
          command: |
            docker build --file Dockerfile.test -t razor-test .
      - run:
          name: "go-fmt"
          command: |
            docker run --rm -v $(pwd):/test --name go  razor-test gofmt
      - run:
          name: "go-lint"
          command: |
            docker run --rm -v $(pwd):/test --name go  razor-test golangci-lint run -v --timeout 5m
      - run:
          name: "Executing test cases"
          command: |
            docker run --rm -v $(pwd):/test --name go  razor-test go-acc ./... --ignore razor/accounts/mocks --ignore razor/cmd/mocks --ignore razor/utils/mocks --ignore pkg --ignore razor/path/mocks --output /test/coverage.txt
      - run:
          name: "Executing benchmarks"
          command: |
            docker run --rm -v $(pwd):/test --name go  razor-test go test ./... -bench=. -run=^#
      - run:
          name: "Publish Coverage to Coveralls.io"
          command: |
            docker run --rm -v $(pwd):/test --name go -e COVERALLS_TOKEN=$COVERALLS_TOKEN razor-test goveralls -coverprofile=/test/coverage.txt -service semaphore -repotoken $COVERALLS_TOKEN
      - persist_to_workspace:
          root: .
          paths:
            - .
  push-docker-build:
    docker:
      - image: cimg/go:1.17.6
        environment:
          IMAGE_NAME: "razornetwork/razor-go"

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - run:
          name: Install Docker Buildx
          command: |
            mkdir -vp ~/.docker/cli-plugins/
            curl --silent -L "https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx version
            sudo apt-get update && sudo apt-get install -y binfmt-support qemu-user-static
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker run --privileged --rm tonistiigi/binfmt --install arm64
            docker context create buildcontext
            docker buildx create buildcontext --use
      - run:
          name: "Build docker image"
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
            docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag $IMAGE_NAME:$CIRCLE_TAG .
  build-amd:
    machine:
      image: ubuntu-2004:202101-01
    steps:
      - checkout
      - run:
          name: "Installing Go" 
          command: | 
            sudo apt-get update
            sudo rm -rf /usr/local/go  
            wget https://dl.google.com/go/go1.17.7.linux-amd64.tar.gz 
            sudo tar -xvf go1.17.7.linux-amd64.tar.gz   
            sudo mv go /usr/local  
      - run:
          name: "Check Version" 
          command: | 
            go version
            node -v
      - run:
          name: "Installing abigen" 
          command: |             
            sudo add-apt-repository -y ppa:ethereum/ethereum
            sudo apt-get update -y
            sudo apt-get install ethereum -y
      - run:
          name: "Start building" 
          command: |         
            npm i
            npm run build-noargs
      - run:
          name: "Creating Zip"
          command: |
            cd build/bin
            tar -czvf razor_go.linux-amd64.tar.gz razor
            mv razor_go.linux-amd64.tar.gz ../../
      - persist_to_workspace:
          root: .
          paths:
            - razor_go.linux-amd64.tar.gz
  build-arm:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    steps:
      - checkout
      - run:
          name: "Installing Go" 
          command: | 
            sudo apt-get update
            sudo rm -rf /usr/local/go  
            wget https://dl.google.com/go/go1.17.7.linux-arm64.tar.gz 
            sudo tar -xvf go1.17.7.linux-arm64.tar.gz   
            sudo mv go /usr/local  
      - run:
          name: "Check Version" 
          command: | 
            go version
            node -v
      - run:
          name: "Installing abigen" 
          command: |             
            sudo add-apt-repository -y ppa:ethereum/ethereum
            sudo apt-get update -y
            sudo apt-get install ethereum -y
      - run:
          name: "Start building" 
          command: |         
            npm i
            npm run build-noargs
      - run:
          name: "Creating Zip"
          command: |
            cd build/bin
            tar -czvf razor_go.linux-arm64.tar.gz razor
            mv razor_go.linux-arm64.tar.gz ../../
      - persist_to_workspace:
          root: .
          paths:
            - razor_go.linux-arm64.tar.gz


  publish-github-release:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - attach_workspace:
          at: razor_go.linux-amd64.tar.gz
      - attach_workspace:
          at: razor_go.linux-arm64.tar.gz
      - run:
          name: "Publish Release on GitHub"
          command: | 
            go get -u github.com/tcnksm/ghr
            VERSION=$(git describe --tags --abbrev=0)
            mv razor_go.linux-amd64.tar.gz razor_go.${VERSION}.linux-amd64.tar.gz && mv razor_go.linux-arm64.tar.gz razor_go.${VERSION}.linux-arm64.tar.gz
            echo "Pushing artifacts echo  razor_go.${VERSION}.linux-amd64.tar.gz and razor_go.${VERSION}.linux-arm64.tar.gz"
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${VERSION} razor_go.${VERSION}.linux-amd64.tar.gz
  commit-github:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "58:11:de:b1:c6:a7:27:ce:e0:90:6c:59:5a:15:25:20"
      - run:
          name: Commit to GitHub
          command: |
            git config user.email "shrikant1997upadhyay@gmail.com"
            git config user.name "CircleCI Job"
            git push --set-upstream origin ${CIRCLE_BRANCH}
            sed -i 's/v0.0.0/v1.0.0/g' install.sh
            git commit --allow-empty -am "Automatic commit from CircleCI [skip ci]"
            git push

workflows:
  # tests:
  #   jobs:
  #     - test
  commit:
    jobs:
      - commit-github
  publish-github:
    jobs:
      - build-amd:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/      
      - build-arm:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/  
      - publish-github-release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - build-arm
            - build-amd
  publish:
    jobs:
      - push-docker-build:
          context: Build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
